# Example workflow using the jira-release action
name: Generate Jira Release

on:
  workflow_dispatch:
    inputs:
      release-name:
        description: 'Name of release (default to current yyyy-mm-dd if no release already exists)'
        required: false
        default: ''

env:
  # kosli commands picks up org, flow, trail and api-token from these environment variables
  KOSLI_ORG: "${{ vars.KOSLI_ORG }}"
  KOSLI_FLOW: "jira-multi-repo-release"
  KOSLI_ENV_PROD: "jira-multi-repo-prod"
  KOSLI_API_TOKEN: "${{ secrets.KOSLI_PUBLIC_API_TOKEN }}"
  KOSLI_CLI_VERSION: "${{ vars.KOSLI_CLI_VERSION }}"
  KOSLI_TEMPLATE_FILE: "kosli-flow-templates/release-template.yml"
  JIRA_BASE_URL: "${{ vars.KOSLI_JIRA_BASE_URL }}"
  JIRA_USERNAME: ${{ vars.KOSLI_JIRA_USERNAME }}
  JIRA_API_TOKEN: ${{ secrets.KOSLI_JIRA_API_TOKEN }}
  JIRA_PROJECT_KEY: ${{ vars.JIRA_PROJECT_KEY }}
  JIRA_PROJECT_ID: ${{ vars.JIRA_PROJECT_ID }}

jobs:
  generate-jira-release:
    name: Create or update Jira release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli cli
        uses: kosli-dev/setup-cli-action@v2
        with:
          version:
            ${{ vars.KOSLI_CLI_VERSION }}

      - name: Create or get Jira release candidate
        id: release-candidate
        run: |
          echo "STEP: Create or get Jira release candidate"
          source .github/actions/common/lib-jira.sh
          
          CURRENT_REL_JSON=$(get_current_release_candidate ${JIRA_PROJECT_ID})
          REL_VALUES_JSON=$(echo "${CURRENT_REL_JSON}" | jq .values)
          if [ "${REL_VALUES_JSON}" == "[]" ]; then
            echo "No release candidate exist"
            echo "release-was-created=true" >> $GITHUB_OUTPUT
          
            # Create the release and get the release ID and release name
          
            RELEASE_NAME="${{ github.event.inputs.release-name }}"
            if [ -z "$RELEASE_NAME" ]; then
              RELEASE_NAME=$(date -u "+%Y-%m-%d")
            fi
            CREATE_RESULT_JSON=$(create_release ${JIRA_PROJECT_ID} ${RELEASE_NAME})
            RELEASE_ID=$(echo "${CREATE_RESULT_JSON}" | jq .id)
          
            PROJECT_KEY=$(echo "${JIRA_PROJECT_ID}" | cut -d',' -f1)
            REL_LINK="${JIRA_BASE_URL}/projects/${PROJECT_KEY}/versions/${RELEASE_ID}"
            echo "REL_LINK=${REL_LINK}" >> $GITHUB_ENV
            echo "Created Jira release_name: **${RELEASE_NAME}**" >> $GITHUB_STEP_SUMMARY
            echo "release_id: **${RELEASE_ID}**" >> $GITHUB_STEP_SUMMARY
          else
            echo "Release candidate exist"
            RELEASE_ID=$(echo "${REL_VALUES_JSON}" |  jq -r '.[0].id')
            RELEASE_NAME=$(echo "${REL_VALUES_JSON}" |  jq -r '.[0].name')
            echo "Updated Jira release_name: **${RELEASE_NAME}"** >> $GITHUB_STEP_SUMMARY
            echo "release_id: **${RELEASE_ID}**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "RELEASE_ID=${RELEASE_ID}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV

      - name: Begin trail
        if: ${{ steps.release-candidate.outputs.release-was-created == 'true' }}
        shell: bash
        run: |
          echo "STEP: Begin trail with ORG: '${KOSLI_ORG}' FLOW: '${KOSLI_FLOW}' TRAIL: '${{ env.RELEASE_NAME }}' TEMPLATE-FILE: '${KOSLI_TEMPLATE_FILE}'"
          kosli begin trail ${{ env.RELEASE_NAME }} --template-file ${KOSLI_TEMPLATE_FILE} --external-url JiraRelease=${{ env.REL_LINK }}


      - name: Add trail to jira release
        if: ${{ steps.release-candidate.outputs.release-was-created == 'true' }}
        shell: bash
        run: |
          echo "STEP: Add trail to jira release"
          source .github/actions/common/lib-jira.sh
          kosli_trail_link="https://app.kosli.com/${KOSLI_ORG}/flows/${KOSLI_FLOW}/trails/${{ env.RELEASE_NAME }}"
          add_trail_link_to_release ${{ env.RELEASE_ID }} ${kosli_trail_link}

      - name: Report current prod SW
        if: ${{ steps.release-candidate.outputs.release-was-created == 'true' }}
        shell: bash
        run: |
          echo "STEP: Report current prod SW"
          source .github/actions/common/lib-kosli.sh
          get_current_running_env_json ${KOSLI_ENV_PROD} > /tmp/prod-env.json
          create_running_sw_short_list_json /tmp/prod-env.json > /tmp/prod-sw.json
          
          kosli attest custom \
            --type=running-sw \
            --name prod-software \
            --trail ${{ env.RELEASE_NAME }} \
            --attestation-data /tmp/prod-sw.json
          echo "Current prod SW:" >> $GITHUB_STEP_SUMMARY
          cat /tmp/prod-sw.json | jq >> $GITHUB_STEP_SUMMARY

      - name: Report jira issues
        shell: bash
        run: |
          echo "STEP: Report jira issues"
          source .github/actions/common/lib-kosli.sh
          [ -f /tmp/prod-env.json ] || get_current_running_env_json "${KOSLI_ENV_PROD}" > /tmp/prod-env.json
          get_list_of_artifacts_with_release_flow_info /tmp/prod-env.json >  /tmp/prod-release-sw-versions.json

          # Loop over all artifacts, find the all the trails that are newer then what is running now,
          # get all the jira issues from those trails.
          ALL_ISSUES_FILE="/tmp/all_issues.txt"
          > ${ALL_ISSUES_FILE}
          jq -r '.[] | "\(.flow_name) \(.trail_name) \(.name)"' /tmp/prod-release-sw-versions.json | \
          while read -r flow_name trail_name artifact_name; do
              get_issue_keys_in_trails_newer_then ${flow_name} ${trail_name} > ${ALL_ISSUES_FILE}
          done
          
          ISSUES=$(sort -uV ${ALL_ISSUES_FILE} | tr '\n' ' ')
          echo ${ISSUES} | jq -R 'split(" ")' > /tmp/jira-issues.json
  
          kosli attest custom \
              --type=jira-issues-list \
              --name jira-issues \
              --trail ${{ env.RELEASE_NAME }} \
              --attestation-data /tmp/jira-issues.json \
              --annotate "JiraIssues=${ISSUES}"
          
          echo "Jira issues: ${ISSUES}" >> $GITHUB_STEP_SUMMARY
